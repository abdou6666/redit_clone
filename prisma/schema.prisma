// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  craetedSubredit Subredit[] @relation("createdBy")

  username String? @unique

  image        String?
  accounts     Account[]
  sessions     Session[]
  Post         Post[]
  Comment      Comment[]
  CommentVote  CommentVote[]
  Vote         Vote[]
  Subscription Subscription[]
}

model Subredit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId String?
  creator   User?   @relation("createdBy", fields: [creatorId], references: [id])

  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  subredit   Subredit @relation(fields: [subreditId], references: [id])
  subreditId String

  @@id([userId, subreditId])
}

model Post {
  id         String   @id @default(cuid())
  title      String
  content    Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  subredit   Subredit @relation(fields: [subreditId], references: [id])
  subreditId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  votes    Vote[]
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  Post   Post   @relation(fields: [postId], references: [id])
  postId String

  replyToId String?
  replyTo   Comment?  @relation("replyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("replyTo")

  votes     CommentVote[]
  commentId String?
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  type VoteType

  @@id([userId, postId])
}

model CommentVote {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  type VoteType

  @@id([userId, commentId])
}
